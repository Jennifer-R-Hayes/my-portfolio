# --- audit_validation.py ---
import pandas as pd
import json
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from datetime import datetime
import os

# Load config and data
def load_config(file_path="config_rules.json"):
    with open(file_path, "r") as f:
        return json.load(f)["rules"]

def load_data(file_path="sample_data.xlsx"):
    return pd.read_excel(file_path)

def run_validations(df, rules):
    results = []
    for rule in rules:
        if rule["type"] == "not_null":
            invalid = df[df[rule["field"]].isnull()]
        elif rule["type"] == "greater_than":
            invalid = df[df[rule["field"]] <= rule["value"]]
        elif rule["type"] == "in_list":
            invalid = df[~df[rule["field"]].isin(rule["allowed_values"])]
        else:
            continue

        for _, row in invalid.iterrows():
            results.append({
                "Rule ID": rule["id"],
                "Description": rule["description"],
                "Severity": rule["severity"],
                "Field": rule["field"],
                "Invalid Value": row[rule["field"]],
                "InvoiceNumber": row.get("InvoiceNumber", "N/A")
            })
    return pd.DataFrame(results)

def export_csv_report(df):
    os.makedirs("reports", exist_ok=True)
    output_path = f"reports/exceptions_report.csv"
    df.to_csv(output_path, index=False)
    return output_path

def export_pdf_summary(df):
    os.makedirs("reports", exist_ok=True)
    filename = f"reports/latest_audit.pdf"
    c = canvas.Canvas(filename, pagesize=letter)
    c.setFont("Helvetica-Bold", 16)
    c.drawString(100, 750, "Data Quality Audit Summary")
    c.setFont("Helvetica", 12)
    c.drawString(100, 720, f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    c.drawString(100, 700, f"Total Rules Violated: {len(df)}")

    y = 660
    c.setFont("Helvetica", 10)
    for _, row in df.head(10).iterrows():  # limit display
        text = f"{row['Rule ID']} - {row['Description']} | Field: {row['Field']} | Value: {row['Invalid Value']}"
        c.drawString(100, y, text)
        y -= 14
        if y < 100:
            c.showPage()
            y = 750
    c.setFont("Helvetica-Oblique", 10)
    c.drawString(100, 60, "Generated by Data Quality Audit Tool Â© Jennifer Hayes")
    c.save()
    return filename

if __name__ == "__main__":
    df = load_data()
    rules = load_config()
    results = run_validations(df, rules)

    if not results.empty:
        csv_path = export_csv_report(results)
        pdf_path = export_pdf_summary(results)
        print(f"Audit complete. Found {len(results)} issues.")
        print(f"CSV saved to: {csv_path}")
        print(f"PDF saved to: {pdf_path}")
    else:
        print("No validation issues found!")
